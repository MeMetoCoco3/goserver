// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES(
	gen_random_uuid(),
	NOW(),
	NOW(),
	$1,
	$2
)
	RETURNING id, created_at, updated_at, email, hashed_password
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, email, hashed_password FROM users WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const getUserWithID = `-- name: GetUserWithID :one
SELECT id, created_at, updated_at, email, hashed_password FROM users WHERE id = $1
`

func (q *Queries) GetUserWithID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserWithID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const setNewEmail = `-- name: SetNewEmail :exec
UPDATE users SET email = $1 WHERE users.id = $2
`

type SetNewEmailParams struct {
	Email string
	ID    uuid.UUID
}

func (q *Queries) SetNewEmail(ctx context.Context, arg SetNewEmailParams) error {
	_, err := q.db.ExecContext(ctx, setNewEmail, arg.Email, arg.ID)
	return err
}

const setNewPassword = `-- name: SetNewPassword :exec
UPDATE users SET hashed_password = $1 WHERE users.id = $2
`

type SetNewPasswordParams struct {
	HashedPassword string
	ID             uuid.UUID
}

func (q *Queries) SetNewPassword(ctx context.Context, arg SetNewPasswordParams) error {
	_, err := q.db.ExecContext(ctx, setNewPassword, arg.HashedPassword, arg.ID)
	return err
}
